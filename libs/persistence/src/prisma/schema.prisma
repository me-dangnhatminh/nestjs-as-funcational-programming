datasource db {
  provider = "postgresql"
  url      = env("CONNECTION_STRING")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  admin
  user
}

enum Provider {
  local
  google
}

model User {
  id         String    @id @map("id")
  email      String?   @unique @map("email")
  name       String?   @map("name")
  password   String?   @map("password")
  role       UserRole  @map("role")
  provider   Provider  @map("provider")
  providerId String?   @map("provider_id")
  verifiedAt DateTime? @map("verified_at") @db.Timestamp()

  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  avatarUrl String? @map("avatar_url")

  createdAt DateTime  @map("created_at") @db.Timestamp()
  updatedAt DateTime? @map("updated_at") @db.Timestamp()
  removedAt DateTime? @map("removed_at") @db.Timestamp()

  @@map("users")
}

// =================================================================== //
// =========================== FILE SYSTEM =========================== //
// =================================================================== //
model FileRef {
  id             String    @id @map("id")
  name           String    @map("name")
  size           String    @map("size")
  ownerId        String    @map("owner_id")
  createdAt      DateTime  @map("created_at") @db.Timestamp()
  lastModifiedAt DateTime? @map("last_modified_at") @db.Timestamp()
  contentType    String    @map("content_type")
  thumbnail      String?   @map("thumbnail")
  description    String?   @map("description")
  archivedAt     DateTime? @map("archived_at") @db.Timestamp()

  folder FileFolder?

  @@map("files")
}

model Folder {
  id         String    @id @map("id")
  name       String    @map("name")
  size       String    @map("size")
  createdAt  DateTime  @map("created_at") @db.Timestamp()
  archivedAt DateTime? @map("archived_at") @db.Timestamp()
  ownerId    String    @map("owner_id")

  rootId String? @map("root_id")
  depth  Int     @map("depth")
  lft    Int     @map("lft")
  rgt    Int     @map("rgt")

  files   FileFolder[]
  folders Folder[]     @relation("RootFolder")
  root    Folder?      @relation("RootFolder", fields: [rootId], references: [id])

  @@index([lft, rgt])
  @@map("folders")
}

model FileFolder {
  id       String @id @map("id")
  folderId String @map("folder_id")
  fileId   String @unique @map("file_id")

  folder Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  file   FileRef @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("file_folders")
}
