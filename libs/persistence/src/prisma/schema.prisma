datasource db {
  provider = "postgresql"
  url      = env("CONNECTION_STRING")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================== //
// =========================== AUTHENTICATION ======================== //
// =================================================================== //
enum UserRole {
  admin
  user
}

enum Provider {
  local
  google
}

model User {
  id         String    @id @map("id")
  email      String?   @unique @map("email")
  name       String?   @map("name")
  password   String?   @map("password")
  role       UserRole  @map("role")
  provider   Provider  @map("provider")
  providerId String?   @unique @map("provider_id")
  verifiedAt DateTime? @map("verified_at")

  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  avatarUrl String? @map("avatar_url")

  createdAt DateTime  @map("created_at")
  updatedAt DateTime? @map("updated_at")
  removedAt DateTime? @map("removed_at")

  @@map("users")
}

// =================================================================== //
// =========================== FILE SYSTEM =========================== //
// =================================================================== //
model FileRef {
  id         String    @id @map("id")
  name       String    @map("name")
  size       BigInt    @map("size")
  createdAt  DateTime  @map("created_at")
  modifiedAt DateTime? @map("modified_at")
  archivedAt DateTime? @map("archived_at")

  // -- cutom metadata
  ownerId     String    @map("owner_id")
  pinnedAt    DateTime? @map("pinned_at")
  contentType String    @map("content_type")
  thumbnail   String?   @map("thumbnail")
  description String?   @map("description")

  folder FileInFolder[]

  @@map("files")
}

model Folder {
  id         String    @id @map("id")
  name       String    @map("name")
  size       BigInt    @map("size")
  createdAt  DateTime  @map("created_at")
  modifiedAt DateTime? @map("modified_at")
  archivedAt DateTime? @map("archived_at")

  // -- cutom metadata
  ownerId  String    @map("owner_id")
  pinnedAt DateTime? @map("pinned_at")

  // -- hierarchy and parent-child
  rootId   String? @map("root_id")
  parentId String? @map("parent_id")
  depth    Int     @map("depth")
  lft      Int     @map("lft")
  rgt      Int     @map("rgt")

  // -- content
  files   FileInFolder[] // @relation("FileInFolder")
  folders Folder[]       @relation("ParentChild")

  parent    Folder?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  root      Folder?  @relation("RootFlatChild", fields: [rootId], references: [id], onDelete: Cascade)
  flatChild Folder[] @relation("RootFlatChild")

  @@index([lft, rgt])
  @@map("folder_hierarchy")
}

model FileInFolder {
  fileId   String  @id @map("file_id")
  folderId String  @map("folder_id")
  folder   Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  file     FileRef @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("file_in_folder")
}
